# -*- coding: utf-8 -*-
"""LVADSUSR70_Anjali_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o1Y6j609mMFJAAUrWOkq_BsSRFllgEQi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import MinMaxScaler

data=pd.read_csv("/content/Mall_Customers.csv")
data.head()

from sklearn.preprocessing import LabelEncoder
label_encoder=LabelEncoder()
data["Gender"]=label_encoder.fit_transform(data["Gender"])

data.info()

data.shape

data.drop(columns="CustomerID",inplace=True)

data.info()

data.describe()

data.isnull().sum()

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
data["Annual Income (k$)"]=imp.fit_transform(data[["Annual Income (k$)"]])
data.isnull().sum()

data.duplicated().sum()

sns.boxplot(data)

import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(data)
outliers = np.abs(z_scores) > threshold
data = data[~outliers]

data.isnull().sum()

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
data["Annual Income (k$)"]=imp.fit_transform(data[["Annual Income (k$)"]])
data.isnull().sum()

sns.pairplot(data,y_vars="Spending Score (1-100)")

X=data.drop(columns="Spending Score (1-100)")
y=data["Spending Score (1-100)"]

mi_ma_s = MinMaxScaler()
X = mi_ma_s.fit_transform(X)
X = pd.DataFrame(X, columns=["Gender","Age","Annual Income (k$)"])
print(X.head())

from sklearn.cluster import KMeans
cs = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters = i, max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(X)
    cs.append(kmeans.inertia_)
plt.plot(range(1, 11), cs)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('CS')
plt.show()

from sklearn.preprocessing import StandardScaler

X = data[['Gender', 'Spending Score (1-100)']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

k = 5

kmeans = KMeans(n_clusters=k)
pred=kmeans.fit_predict(X_scaled)

data['Cluster'] = kmeans.labels_

centroids = scaler.inverse_transform(kmeans.cluster_centers_)

plt.figure(figsize=(8, 6))

for i in range(k):
    cluster_data = data[data['Cluster'] == i]
    plt.scatter(cluster_data['Annual Income (k$)'], cluster_data['Spending Score (1-100)'],
                label=f'Cluster {i}', alpha=0.6)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='red', label='Centroids')

plt.grid(True)
plt.show()

from sklearn.preprocessing import StandardScaler

X = data[['Age', 'Spending Score (1-100)']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

k = 5

kmeans = KMeans(n_clusters=k)
pred=kmeans.fit_predict(X_scaled)

data['Cluster'] = kmeans.labels_

centroids = scaler.inverse_transform(kmeans.cluster_centers_)

plt.figure(figsize=(8, 6))

for i in range(k):
    cluster_data = data[data['Cluster'] == i]
    plt.scatter(cluster_data['Annual Income (k$)'], cluster_data['Spending Score (1-100)'],
                label=f'Cluster {i}', alpha=0.6)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='red', label='Centroids')

plt.grid(True)
plt.show()

from sklearn.preprocessing import StandardScaler

X = data[['Annual Income (k$)', 'Spending Score (1-100)']].values
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

k = 5

kmeans = KMeans(n_clusters=k)
pred=kmeans.fit_predict(X_scaled)

data['Cluster'] = kmeans.labels_

centroids = scaler.inverse_transform(kmeans.cluster_centers_)

plt.figure(figsize=(8, 6))

for i in range(k):
    cluster_data = data[data['Cluster'] == i]
    plt.scatter(cluster_data['Annual Income (k$)'], cluster_data['Spending Score (1-100)'],
                label=f'Cluster {i}', alpha=0.6)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='*', s=300, c='red', label='Centroids')

plt.grid(True)
plt.show()