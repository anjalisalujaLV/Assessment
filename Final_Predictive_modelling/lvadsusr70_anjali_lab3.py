# -*- coding: utf-8 -*-
"""LVADSUSR70_Anjali_Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ejT7UEgi-thXsqvicjOZxUIHNYTs6YY
"""

#kmeans clustering
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import MinMaxScaler

data=pd.read_csv("/content/seeds.csv")
data.head()

data.shape

data.info()

data.describe()

data.isnull().sum()

#handling null values
data.dropna(inplace=True)

#handling duplicates
data.duplicated().sum()

#detecting outliers
plt.figure(figsize=(15,6))
sns.boxplot(data)

#handling outlier
import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(data)
outliers = np.abs(z_scores) > threshold
data = data[~outliers]

data.isnull().sum()

from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
data["Asymmetry coefficient"]=imp.fit_transform(data[["Asymmetry coefficient"]])
data.isnull().sum()

sns.heatmap(data.corr(),annot=True,cmap="viridis")

#scaling
mi_ma_s = MinMaxScaler()
X = mi_ma_s.fit_transform(data)
X = pd.DataFrame(data)
print(X.head())

#finding the optimal value of k using elbow method an dsilhoette method
inertia_values = []
silhouette_scores = []
k_values = range(2, 30)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X, kmeans.labels_))

plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

optimal_k = 8
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(X)

cluster_labels = kmeans.predict(X)

silhouette_avg = silhouette_score(X, cluster_labels)
print("silhouette score: ",silhouette_avg)

data['Cluster'] = kmeans.labels_
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)

# Add cluster labels to the original data
data['Cluster'] = kmeans.labels_

data.head()