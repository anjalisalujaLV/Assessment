# -*- coding: utf-8 -*-
"""LVADSUSR70_Anjali_Lab4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jsxMs51fCkGnOHKHxIJZU2K2MROFTQT
"""

#anomaly detection
# Import necessary libraries
import pandas as pd
from sklearn.ensemble import IsolationForest
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns

#loading dataset
df = pd.read_csv("/content/social_network.csv")
df.head()

df.info()

df.describe()

#handling null values
df.isnull().sum()

#handling duplicate values
df.duplicated().sum()

df["account_status"].value_counts()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df["account_status"]=le.fit_transform(df["account_status"])
df.head()

sns.boxplot(df)
#NO outliers

sns.heatmap(df.corr(),cmap="viridis",annot=True)

# Select the features to be used for anomaly detection
features = ["login_activity", "posting_activity", "social_connections"]

# Create a new dataframe with the selected features
X = df[features]

model = IsolationForest()
model.fit(X)
y_pred = model.predict(X)

df["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df["anomaly_score"] < 0]

#scatter plot of suspicious activity vs posting activity
plt.scatter(df["posting_activity"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["posting_activity"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Posting Activities")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

#scatter plot of suspicious activity vs social connections
plt.scatter(df["social_connections"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["social_connections"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Posting Activities")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()