# -*- coding: utf-8 -*-
"""LVADSUSR70_Anjali_Lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AzRQGu97uXSGIIncd4y8cNmSGUHwPc9_
"""

#linear_regression
#importing the libraries
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt

#importing data as a dataframe
data=pd.read_csv("/content/auto-mpg.csv")
data.head(5)

data.shape

data.info()

data.describe()

#null values
data.isnull().sum()

#handling null values
data.dropna(inplace=True)

data["horsepower"].value_counts()

data["horsepower"]=data['horsepower'].astype(str)

data.drop(columns="horsepower",inplace=True)

#handling duplicates
data.duplicated().sum()

len(data["car name"].unique())

#As the unique car name is so many, we cant encode this data and it will be not be correlated to the model
#that's why we will drop it
data.drop(columns="car name",inplace=True)

data.head()

data["origin"].value_counts()

data["cylinders"].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(15,6))
sns.boxplot(data)
plt.show()

#detecting outlier
import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(data)
outliers = np.abs(z_scores) > threshold
data = data[~outliers]

data.isnull().sum()

#handling outlier
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
data["acceleration"]=imp.fit_transform(data[["acceleration"]])
data.isnull().sum()

#for feature selection
plt.figure(figsize=(10,6))
sns.heatmap(data.corr(),annot=True,cmap="viridis")
plt.show()

sns.pairplot(data,y_vars="mpg")

#splitting features and labels
X=data.drop(columns='mpg') #feature
y=data["mpg"] #label

#splitting train and test dataset
from sklearn.preprocessing import StandardScaler
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
st_x= StandardScaler()
X_train= st_x.fit_transform(X_train)
X_test= st_x.transform(X_test)
model=LinearRegression()
model.fit(X_train,y_train)
prediction=model.predict(X_test)

#evaluation of model
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
print("r2_score:",r2_score(y_test,prediction))
print("mean_squared_error:",mean_squared_error(y_test,prediction))
print("mean_absolute_error",mean_absolute_error(y_test,prediction))
print("root_mean_square_eror: ",np.sqrt(mean_squared_error(y_test,prediction)))

#plotting actual and predicted datapoints
pred_data=pd.DataFrame({"y_test":y_test,"prediction":prediction})
sns.scatterplot([pred_data["y_test"],pred_data["y_test"]])
sns.scatterplot([pred_data["y_test"],pred_data["prediction"]])